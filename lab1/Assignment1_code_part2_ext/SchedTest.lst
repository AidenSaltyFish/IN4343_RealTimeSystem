
SchedTest.elf:     file format elf32-msp430

SYMBOL TABLE:
00004000 l    d  .text	00000000 .text
00001100 l    d  .bss	00000000 .bss
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000130 l       *ABS*	00000000 MPY
00000132 l       *ABS*	00000000 MPYS
00000134 l       *ABS*	00000000 MAC
00000136 l       *ABS*	00000000 MACS
00000138 l       *ABS*	00000000 OP2
0000013a l       *ABS*	00000000 RESLO
0000013c l       *ABS*	00000000 RESHI
0000013e l       *ABS*	00000000 SUMEXT
00000020 l       *ABS*	00000000 P1IN
00000021 l       *ABS*	00000000 P1OUT
00000022 l       *ABS*	00000000 P1DIR
00000023 l       *ABS*	00000000 P1IFG
00000024 l       *ABS*	00000000 P1IES
00000025 l       *ABS*	00000000 P1IE
00000026 l       *ABS*	00000000 P1SEL
00000028 l       *ABS*	00000000 P2IN
00000029 l       *ABS*	00000000 P2OUT
0000002a l       *ABS*	00000000 P2DIR
0000002b l       *ABS*	00000000 P2IFG
0000002c l       *ABS*	00000000 P2IES
0000002d l       *ABS*	00000000 P2IE
0000002e l       *ABS*	00000000 P2SEL
00000018 l       *ABS*	00000000 P3IN
00000019 l       *ABS*	00000000 P3OUT
0000001a l       *ABS*	00000000 P3DIR
0000001b l       *ABS*	00000000 P3SEL
0000001c l       *ABS*	00000000 P4IN
0000001d l       *ABS*	00000000 P4OUT
0000001e l       *ABS*	00000000 P4DIR
0000001f l       *ABS*	00000000 P4SEL
00000030 l       *ABS*	00000000 P5IN
00000031 l       *ABS*	00000000 P5OUT
00000032 l       *ABS*	00000000 P5DIR
00000033 l       *ABS*	00000000 P5SEL
00000034 l       *ABS*	00000000 P6IN
00000035 l       *ABS*	00000000 P6OUT
00000036 l       *ABS*	00000000 P6DIR
00000037 l       *ABS*	00000000 P6SEL
00000070 l       *ABS*	00000000 U0CTL
00000071 l       *ABS*	00000000 U0TCTL
00000072 l       *ABS*	00000000 U0RCTL
00000073 l       *ABS*	00000000 U0MCTL
00000074 l       *ABS*	00000000 U0BR0
00000075 l       *ABS*	00000000 U0BR1
00000076 l       *ABS*	00000000 U0RXBUF
00000077 l       *ABS*	00000000 U0TXBUF
00000070 l       *ABS*	00000000 UCTL
00000071 l       *ABS*	00000000 UTCTL
00000072 l       *ABS*	00000000 URCTL
00000073 l       *ABS*	00000000 UMCTL
00000074 l       *ABS*	00000000 UBR0
00000075 l       *ABS*	00000000 UBR1
00000076 l       *ABS*	00000000 RXBUF
00000077 l       *ABS*	00000000 TXBUF
00000070 l       *ABS*	00000000 UCTL0
00000071 l       *ABS*	00000000 UTCTL0
00000072 l       *ABS*	00000000 URCTL0
00000073 l       *ABS*	00000000 UMCTL0
00000074 l       *ABS*	00000000 UBR00
00000075 l       *ABS*	00000000 UBR10
00000076 l       *ABS*	00000000 RXBUF0
00000077 l       *ABS*	00000000 TXBUF0
00000070 l       *ABS*	00000000 UCTL_0
00000071 l       *ABS*	00000000 UTCTL_0
00000072 l       *ABS*	00000000 URCTL_0
00000073 l       *ABS*	00000000 UMCTL_0
00000074 l       *ABS*	00000000 UBR0_0
00000075 l       *ABS*	00000000 UBR1_0
00000076 l       *ABS*	00000000 RXBUF_0
00000077 l       *ABS*	00000000 TXBUF_0
00000050 l       *ABS*	00000000 I2CIE
00000051 l       *ABS*	00000000 I2CIFG
00000052 l       *ABS*	00000000 I2CNDAT
00000071 l       *ABS*	00000000 I2CTCTL
00000072 l       *ABS*	00000000 I2CDCTL
00000073 l       *ABS*	00000000 I2CPSC
00000074 l       *ABS*	00000000 I2CSCLH
00000075 l       *ABS*	00000000 I2CSCLL
00000076 l       *ABS*	00000000 I2CDRB
00000076 l       *ABS*	00000000 I2CDRW
00000118 l       *ABS*	00000000 I2COA
0000011a l       *ABS*	00000000 I2CSA
0000011c l       *ABS*	00000000 I2CIV
00000076 l       *ABS*	00000000 I2CDR
00000078 l       *ABS*	00000000 U1CTL
00000079 l       *ABS*	00000000 U1TCTL
0000007a l       *ABS*	00000000 U1RCTL
0000007b l       *ABS*	00000000 U1MCTL
0000007c l       *ABS*	00000000 U1BR0
0000007d l       *ABS*	00000000 U1BR1
0000007e l       *ABS*	00000000 U1RXBUF
0000007f l       *ABS*	00000000 U1TXBUF
00000078 l       *ABS*	00000000 UCTL1
00000079 l       *ABS*	00000000 UTCTL1
0000007a l       *ABS*	00000000 URCTL1
0000007b l       *ABS*	00000000 UMCTL1
0000007c l       *ABS*	00000000 UBR01
0000007d l       *ABS*	00000000 UBR11
0000007e l       *ABS*	00000000 RXBUF1
0000007f l       *ABS*	00000000 TXBUF1
00000078 l       *ABS*	00000000 UCTL_1
00000079 l       *ABS*	00000000 UTCTL_1
0000007a l       *ABS*	00000000 URCTL_1
0000007b l       *ABS*	00000000 UMCTL_1
0000007c l       *ABS*	00000000 UBR0_1
0000007d l       *ABS*	00000000 UBR1_1
0000007e l       *ABS*	00000000 RXBUF_1
0000007f l       *ABS*	00000000 TXBUF_1
00000055 l       *ABS*	00000000 SVSCTL
00000128 l       *ABS*	00000000 FCTL1
0000012a l       *ABS*	00000000 FCTL2
0000012c l       *ABS*	00000000 FCTL3
00000059 l       *ABS*	00000000 CACTL1
0000005a l       *ABS*	00000000 CACTL2
0000005b l       *ABS*	00000000 CAPD
0000012e l       *ABS*	00000000 TA0IV
00000160 l       *ABS*	00000000 TA0CTL
00000170 l       *ABS*	00000000 TA0R
00000162 l       *ABS*	00000000 TA0CCTL0
00000164 l       *ABS*	00000000 TA0CCTL1
00000172 l       *ABS*	00000000 TA0CCR0
00000174 l       *ABS*	00000000 TA0CCR1
00000166 l       *ABS*	00000000 TA0CCTL2
00000176 l       *ABS*	00000000 TA0CCR2
0000011e l       *ABS*	00000000 TBIV
00000180 l       *ABS*	00000000 TBCTL
00000190 l       *ABS*	00000000 TBR
00000182 l       *ABS*	00000000 TBCCTL0
00000184 l       *ABS*	00000000 TBCCTL1
00000186 l       *ABS*	00000000 TBCCTL2
00000192 l       *ABS*	00000000 TBCCR0
00000194 l       *ABS*	00000000 TBCCR1
00000196 l       *ABS*	00000000 TBCCR2
00000188 l       *ABS*	00000000 TBCCTL3
0000018a l       *ABS*	00000000 TBCCTL4
0000018c l       *ABS*	00000000 TBCCTL5
0000018e l       *ABS*	00000000 TBCCTL6
00000198 l       *ABS*	00000000 TBCCR3
0000019a l       *ABS*	00000000 TBCCR4
0000019c l       *ABS*	00000000 TBCCR5
0000019e l       *ABS*	00000000 TBCCR6
00000056 l       *ABS*	00000000 DCOCTL
00000057 l       *ABS*	00000000 BCSCTL1
00000058 l       *ABS*	00000000 BCSCTL2
000001a0 l       *ABS*	00000000 ADC12CTL0
000001a2 l       *ABS*	00000000 ADC12CTL1
000001a4 l       *ABS*	00000000 ADC12IFG
000001a6 l       *ABS*	00000000 ADC12IE
000001a8 l       *ABS*	00000000 ADC12IV
00000140 l       *ABS*	00000000 ADC12MEM0
00000142 l       *ABS*	00000000 ADC12MEM1
00000144 l       *ABS*	00000000 ADC12MEM2
00000146 l       *ABS*	00000000 ADC12MEM3
00000148 l       *ABS*	00000000 ADC12MEM4
0000014a l       *ABS*	00000000 ADC12MEM5
0000014c l       *ABS*	00000000 ADC12MEM6
0000014e l       *ABS*	00000000 ADC12MEM7
00000150 l       *ABS*	00000000 ADC12MEM8
00000152 l       *ABS*	00000000 ADC12MEM9
00000154 l       *ABS*	00000000 ADC12MEM10
00000156 l       *ABS*	00000000 ADC12MEM11
00000158 l       *ABS*	00000000 ADC12MEM12
0000015a l       *ABS*	00000000 ADC12MEM13
0000015c l       *ABS*	00000000 ADC12MEM14
0000015e l       *ABS*	00000000 ADC12MEM15
00000080 l       *ABS*	00000000 ADC12MCTL0
00000081 l       *ABS*	00000000 ADC12MCTL1
00000082 l       *ABS*	00000000 ADC12MCTL2
00000083 l       *ABS*	00000000 ADC12MCTL3
00000084 l       *ABS*	00000000 ADC12MCTL4
00000085 l       *ABS*	00000000 ADC12MCTL5
00000086 l       *ABS*	00000000 ADC12MCTL6
00000087 l       *ABS*	00000000 ADC12MCTL7
00000088 l       *ABS*	00000000 ADC12MCTL8
00000089 l       *ABS*	00000000 ADC12MCTL9
0000008a l       *ABS*	00000000 ADC12MCTL10
0000008b l       *ABS*	00000000 ADC12MCTL11
0000008c l       *ABS*	00000000 ADC12MCTL12
0000008d l       *ABS*	00000000 ADC12MCTL13
0000008e l       *ABS*	00000000 ADC12MCTL14
0000008f l       *ABS*	00000000 ADC12MCTL15
000001c0 l       *ABS*	00000000 DAC12_0CTL
000001c2 l       *ABS*	00000000 DAC12_1CTL
000001c8 l       *ABS*	00000000 DAC12_0DAT
000001ca l       *ABS*	00000000 DAC12_1DAT
00000122 l       *ABS*	00000000 DMACTL0
00000124 l       *ABS*	00000000 DMACTL1
000001e0 l       *ABS*	00000000 DMA0CTL
000001e2 l       *ABS*	00000000 DMA0SA
000001e4 l       *ABS*	00000000 DMA0DA
000001e6 l       *ABS*	00000000 DMA0SZ
000001e8 l       *ABS*	00000000 DMA1CTL
000001ea l       *ABS*	00000000 DMA1SA
000001ec l       *ABS*	00000000 DMA1DA
000001ee l       *ABS*	00000000 DMA1SZ
000001f0 l       *ABS*	00000000 DMA2CTL
000001f2 l       *ABS*	00000000 DMA2SA
000001f4 l       *ABS*	00000000 DMA2DA
000001f6 l       *ABS*	00000000 DMA2SZ
00000120 l       *ABS*	00000000 WDTCTL
00000000 l       *ABS*	00000000 IE1
00000002 l       *ABS*	00000000 IFG1
00000001 l       *ABS*	00000000 IE2
00000003 l       *ABS*	00000000 IFG2
00000004 l       *ABS*	00000000 ME1
00000005 l       *ABS*	00000000 ME2
00000000 l    df *ABS*	00000000 SchedTest.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Led.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Clock.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Context.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001100 l     O .bss	00000001 CurrentContext
00001102 l     O .bss	00000003 Contexts
00000000 l    df *ABS*	00000000 SchedulerOnline.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Scheduler_P_FP.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 Scheduler_P_EDF.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00000000 l    df *ABS*	00000000 TimeTracking.c
00000130 l       *ABS*	00000000 __MPY
00000132 l       *ABS*	00000000 __MPYS
00000134 l       *ABS*	00000000 __MAC
00000136 l       *ABS*	00000000 __MACS
00000138 l       *ABS*	00000000 __OP2
0000013a l       *ABS*	00000000 __RESLO
0000013c l       *ABS*	00000000 __RESHI
0000013e l       *ABS*	00000000 __SUMEXT
00001106 l     O .bss	00000004 StartTimes
0000110a l     O .bss	00000004 Totals
0000110e l     O .bss	00000001 JobsExecuted
00000000 g       *ABS*	00000000 __data_size
00004266 g     F .text	00000084 RegisterTask
00004200 g     F .text	00000016 ResumeContext
000041d0 g     F .text	00000018 InitClock
00004492 g     F .text	0000000c StartTracking
00004186 g     F .text	0000000a InitLeds
00004036 g     F .text	00000018 CountDelay
000044e6 g       .text	00000000 _etext
00000044 g       *ABS*	00000000 __bss_size
000044b4 g     F .text	00000006 AddJobExecution
00004030 g       .text	00000000 _unexpected_1_
00004030  w      .text	00000000 vector_ffe0
00001110 g     O .bss	00000001 BusyPrio
00004424 g     F .text	0000006c Scheduler_P_FP
00004490 g     F .text	00000002 Scheduler_P_EDF
000042fe g       .text	00000000 vector_ffec
00004030  w      .text	00000000 vector_fff0
000044e6 g       *ABS*	00000000 __data_load_start
00004030 g       .text	00000000 __dtors_end
00004030  w      .text	00000000 vector_fffc
0000414a g     F .text	0000003c BlinkYellow
00004030  w      .text	00000000 vector_ffe4
000041a0 g     F .text	00000006 ToggleLeds
00004190 g     F .text	00000010 SetLeds
0000ffe0 g     O .vectors	00000020 InterruptVectors
000042ea g     F .text	00000014 UnRegisterTask
00001111 g     O .bss	00000001 Pending
000041e8 g     F .text	00000018 ContextSwitch
0000410e g     F .text	0000003c BlinkGreen
0000401c  w      .text	00000000 __do_clear_bss
000042fe g     F .text	00000126 TimerIntrpt
00004030  w      .text	00000000 vector_ffe2
00004030  w      .text	00000000 vector_ffe8
00004034  w      .text	00000000 _unexpected_
00004030  w      .text	00000000 vector_fffa
00001112 g     O .bss	00000030 Tasks
00004000  w      .text	00000000 _reset_vector__
00004030 g       .text	00000000 __ctors_start
0000400a  w      .text	00000000 __do_copy_data
0000404e g     F .text	00000020 CountRealtimeDelay
00001100 g       .bss	00000000 __bss_start
00004030  w      .text	00000000 vector_ffee
00004030  w      .text	00000000 vector_fff4
0000406e g     F .text	00000064 main
00004030  w      .text	00000000 vector_fff8
000044ba g     F .text	0000002c PrintResults
00004030  w      .text	00000000 vector_fff2
000040d2 g     F .text	0000003c BlinkRed
00010000 g       .vectors	00000000 _vectors_end
000041a6 g     F .text	0000002a SetDebug
00004030  w      .text	00000000 vector_ffe6
00004216 g     F .text	00000006 IntDisable
00001142 g     O .bss	00000002 NextInterruptTime
00004000  w      .text	00000000 __init_stack
00004030 g       .text	00000000 __dtors_start
00004030 g       .text	00000000 __ctors_end
00003900 g       *ABS*	00000000 __stack
00001100 g       .bss	00000000 _edata
00001144 g       .bss	00000000 _end
00004030  w      .text	00000000 vector_fff6
00004004  w      .text	00000000 __low_level_init
0000402c  w      .text	00000000 __jump_to_main
00004220 g     F .text	00000046 InitTasks
00001100 g       .bss	00000000 __data_start
00004030  w      .text	00000000 vector_ffea
0000449e g     F .text	00000016 StopTracking
0000421c g     F .text	00000004 RestoreSW



Disassembly of section .text:

00004000 <__init_stack>:
    4000:	31 40 00 39 	mov	#14592,	r1	;#0x3900

00004004 <__low_level_init>:
    4004:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4008:	20 01 

0000400a <__do_copy_data>:
    400a:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    400e:	0f 93       	tst	r15		
    4010:	05 24       	jz	$+12     	;abs 0x401c
    4012:	2f 83       	decd	r15		
    4014:	9f 4f e6 44 	mov	17638(r15),4352(r15);0x44e6(r15), 0x1100(r15)
    4018:	00 11 
    401a:	fb 23       	jnz	$-8      	;abs 0x4012

0000401c <__do_clear_bss>:
    401c:	3f 40 44 00 	mov	#68,	r15	;#0x0044
    4020:	0f 93       	tst	r15		
    4022:	04 24       	jz	$+10     	;abs 0x402c
    4024:	1f 83       	dec	r15		
    4026:	cf 43 00 11 	mov.b	#0,	4352(r15);r3 As==00, 0x1100(r15)
    402a:	fc 23       	jnz	$-6      	;abs 0x4024

0000402c <__jump_to_main>:
    402c:	30 40 6e 40 	br	#0x406e	

00004030 <__ctors_end>:
    4030:	30 40 34 40 	br	#0x4034	

00004034 <_unexpected_>:
    4034:	00 13       	reti			

00004036 <CountDelay>:
#define YELLOWBLINKPRIO 0
#define GREENBLINKPRIO  1
#define REDBLINKPRIO    2

void CountDelay (volatile uint16_t cnt)
{
    4036:	21 83       	decd	r1		
    4038:	81 4f 00 00 	mov	r15,	0(r1)	;0x0000(r1)
  while (cnt--);
    403c:	2f 41       	mov	@r1,	r15	
    403e:	0e 4f       	mov	r15,	r14	
    4040:	3e 53       	add	#-1,	r14	;r3 As==11
    4042:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    4046:	0f 93       	tst	r15		
    4048:	f9 23       	jnz	$-12     	;abs 0x403c
}
    404a:	21 53       	incd	r1		
    404c:	30 41       	ret			

0000404e <CountRealtimeDelay>:
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    404e:	0f 5f       	rla	r15		
    4050:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    4052:	1d 42 70 01 	mov	&0x0170,r13	
    4056:	0e 43       	clr	r14		
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4058:	07 3c       	jmp	$+16     	;abs 0x4068
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    405a:	1c 42 70 01 	mov	&0x0170,r12	
    405e:	0d 9c       	cmp	r12,	r13	
    4060:	fc 27       	jz	$-6      	;abs 0x405a
    {
      TicksPassed++; // increment ticks counter
    4062:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    4064:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4068:	0e 9f       	cmp	r15,	r14	
    406a:	f7 2b       	jnc	$-16     	;abs 0x405a
    {
      TicksPassed++; // increment ticks counter
      OldTAR = TAR; // store new value of TAR as old value
    }
  }
}
    406c:	30 41       	ret			

0000406e <main>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (RED, 0);
}

int main(void) 
{ 
    406e:	31 40 00 39 	mov	#14592,	r1	;#0x3900
  WDTCTL = WDTPW + WDTHOLD;       // Stop watchdog timer 
    4072:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    4076:	20 01 
  
  InitClock ();
    4078:	b0 12 d0 41 	call	#0x41d0	

  InitLeds (RED | GREEN | YELLOW | WHITE | BROWN | PURPLE);
    407c:	7f 40 77 00 	mov.b	#119,	r15	;#0x0077
    4080:	b0 12 86 41 	call	#0x4186	

#define Tst1

#ifdef Tst1
  // note: there 1024 ticks in second
  RegisterTask (0, 1024, 350, BlinkYellow, YELLOWBLINKPRIO, 0); 
    4084:	43 12       	push.b	#0		;r3 As==00
    4086:	43 12       	push.b	#0		;r3 As==00
    4088:	3c 40 4a 41 	mov	#16714,	r12	;#0x414a
    408c:	3d 40 5e 01 	mov	#350,	r13	;#0x015e
    4090:	3e 40 00 04 	mov	#1024,	r14	;#0x0400
    4094:	0f 43       	clr	r15		
    4096:	b0 12 66 42 	call	#0x4266	
  RegisterTask (0, 512, 140, BlinkGreen, GREENBLINKPRIO, 0);
    409a:	43 12       	push.b	#0		;r3 As==00
    409c:	53 12       	push.b	#1		;r3 As==01
    409e:	3c 40 0e 41 	mov	#16654,	r12	;#0x410e
    40a2:	3d 40 8c 00 	mov	#140,	r13	;#0x008c
    40a6:	3e 40 00 02 	mov	#512,	r14	;#0x0200
    40aa:	0f 43       	clr	r15		
    40ac:	b0 12 66 42 	call	#0x4266	
  RegisterTask (0, 256, 30, BlinkRed, REDBLINKPRIO, 0);
    40b0:	43 12       	push.b	#0		;r3 As==00
    40b2:	63 12       	push.b	#2		;r3 As==10
    40b4:	3c 40 d2 40 	mov	#16594,	r12	;#0x40d2
    40b8:	3d 40 1e 00 	mov	#30,	r13	;#0x001e
    40bc:	3e 40 00 01 	mov	#256,	r14	;#0x0100
    40c0:	0f 43       	clr	r15		
    40c2:	b0 12 66 42 	call	#0x4266	
  RegisterTask (0, 128, 5, BlinkRed, 8, 0);
  RegisterTask (0, 256, 2, BlinkRed, 9, 0);
#endif


  _EINT();                        // Enable interrupts
    40c6:	32 d2       	eint			
    40c8:	31 50 0c 00 	add	#12,	r1	;#0x000c

  while(1) {
    EnterLowPowerMode3(); // idle task, set to low power mode 3 
    40cc:	32 c0 d0 00 	bic	#208,	r2	;#0x00d0
    40d0:	fd 3f       	jmp	$-4      	;abs 0x40cc

000040d2 <BlinkRed>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (GREEN, 0);
}

void BlinkRed (uint16_t ExecutionTime)
{
    40d2:	0b 12       	push	r11		
    40d4:	0b 4f       	mov	r15,	r11	
  SetLeds (RED, 1);
    40d6:	5e 43       	mov.b	#1,	r14	;r3 As==01
    40d8:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    40dc:	b0 12 90 41 	call	#0x4190	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    40e0:	0f 4b       	mov	r11,	r15	
    40e2:	0f 5f       	rla	r15		
    40e4:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    40e6:	1d 42 70 01 	mov	&0x0170,r13	
    40ea:	0e 43       	clr	r14		
    40ec:	07 3c       	jmp	$+16     	;abs 0x40fc
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    40ee:	1c 42 70 01 	mov	&0x0170,r12	
    40f2:	0d 9c       	cmp	r12,	r13	
    40f4:	fc 27       	jz	$-6      	;abs 0x40ee
    {
      TicksPassed++; // increment ticks counter
    40f6:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    40f8:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    40fc:	0e 9f       	cmp	r15,	r14	
    40fe:	f7 2b       	jnc	$-16     	;abs 0x40ee

void BlinkRed (uint16_t ExecutionTime)
{
  SetLeds (RED, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (RED, 0);
    4100:	4e 43       	clr.b	r14		
    4102:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    4106:	b0 12 90 41 	call	#0x4190	
}
    410a:	3b 41       	pop	r11		
    410c:	30 41       	ret			

0000410e <BlinkGreen>:
  CountRealtimeDelay(ExecutionTime);
  SetLeds (YELLOW, 0);
}

void BlinkGreen (uint16_t ExecutionTime)
{
    410e:	0b 12       	push	r11		
    4110:	0b 4f       	mov	r15,	r11	
  SetLeds (GREEN, 1);
    4112:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4114:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    4118:	b0 12 90 41 	call	#0x4190	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    411c:	0f 4b       	mov	r11,	r15	
    411e:	0f 5f       	rla	r15		
    4120:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    4122:	1d 42 70 01 	mov	&0x0170,r13	
    4126:	0e 43       	clr	r14		
    4128:	07 3c       	jmp	$+16     	;abs 0x4138
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    412a:	1c 42 70 01 	mov	&0x0170,r12	
    412e:	0d 9c       	cmp	r12,	r13	
    4130:	fc 27       	jz	$-6      	;abs 0x412a
    {
      TicksPassed++; // increment ticks counter
    4132:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    4134:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4138:	0e 9f       	cmp	r15,	r14	
    413a:	f7 2b       	jnc	$-16     	;abs 0x412a

void BlinkGreen (uint16_t ExecutionTime)
{
  SetLeds (GREEN, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (GREEN, 0);
    413c:	4e 43       	clr.b	r14		
    413e:	7f 40 20 00 	mov.b	#32,	r15	;#0x0020
    4142:	b0 12 90 41 	call	#0x4190	
}
    4146:	3b 41       	pop	r11		
    4148:	30 41       	ret			

0000414a <BlinkYellow>:
    }
  }
}

void BlinkYellow (uint16_t ExecutionTime)
{
    414a:	0b 12       	push	r11		
    414c:	0b 4f       	mov	r15,	r11	
  SetLeds (YELLOW, 1);
    414e:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4150:	7f 40 40 00 	mov.b	#64,	r15	;#0x0040
    4154:	b0 12 90 41 	call	#0x4190	
void CountRealtimeDelay (uint16_t Ticks)
{
  uint16_t TicksPassed = 0;
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!
    4158:	0f 4b       	mov	r11,	r15	
    415a:	0f 5f       	rla	r15		
    415c:	0f 5f       	rla	r15		

  OldTAR = TAR; // store current value of TAR
    415e:	1d 42 70 01 	mov	&0x0170,r13	
    4162:	0e 43       	clr	r14		
    4164:	07 3c       	jmp	$+16     	;abs 0x4174
  while (TicksPassed < Ticks) // continue until all ticks have passed
  {
    if (OldTAR != TAR) // a new value of TAR exists, thus a tick has occured
    4166:	1c 42 70 01 	mov	&0x0170,r12	
    416a:	0d 9c       	cmp	r12,	r13	
    416c:	fc 27       	jz	$-6      	;abs 0x4166
    {
      TicksPassed++; // increment ticks counter
    416e:	1e 53       	inc	r14		
      OldTAR = TAR; // store new value of TAR as old value
    4170:	1d 42 70 01 	mov	&0x0170,r13	
  uint16_t OldTAR;

  Ticks *= 4; // multiply by 4, to get ms approximately!

  OldTAR = TAR; // store current value of TAR
  while (TicksPassed < Ticks) // continue until all ticks have passed
    4174:	0e 9f       	cmp	r15,	r14	
    4176:	f7 2b       	jnc	$-16     	;abs 0x4166

void BlinkYellow (uint16_t ExecutionTime)
{
  SetLeds (YELLOW, 1);
  CountRealtimeDelay(ExecutionTime);
  SetLeds (YELLOW, 0);
    4178:	4e 43       	clr.b	r14		
    417a:	7f 40 40 00 	mov.b	#64,	r15	;#0x0040
    417e:	b0 12 90 41 	call	#0x4190	
}
    4182:	3b 41       	pop	r11		
    4184:	30 41       	ret			

00004186 <InitLeds>:
#include <iomacros.h>
#include "Led.h"

void InitLeds (uint8_t Colors)
{
  LEDDIR |= Colors;
    4186:	c2 df 32 00 	bis.b	r15,	&0x0032	
  LEDPIN = 0;
    418a:	c2 43 31 00 	mov.b	#0,	&0x0031	;r3 As==00
}
    418e:	30 41       	ret			

00004190 <SetLeds>:

void SetLeds (uint8_t Colors, uint8_t On)
{
  if (On) LEDPIN |= Colors;
    4190:	4e 93       	tst.b	r14		
    4192:	03 24       	jz	$+8      	;abs 0x419a
    4194:	c2 df 31 00 	bis.b	r15,	&0x0031	
    4198:	30 41       	ret			
  else    LEDPIN &= ~Colors;
    419a:	c2 cf 31 00 	bic.b	r15,	&0x0031	
    419e:	30 41       	ret			

000041a0 <ToggleLeds>:
}

void ToggleLeds (uint8_t Colors)
{
  LEDPIN ^= Colors;
    41a0:	c2 ef 31 00 	xor.b	r15,	&0x0031	
}
    41a4:	30 41       	ret			

000041a6 <SetDebug>:

void SetDebug (uint8_t index, uint8_t value)
{
    41a6:	7f f3       	and.b	#-1,	r15	;r3 As==11
  if (value) P4OUT |= 1 << index;
    41a8:	4e 93       	tst.b	r14		
    41aa:	09 24       	jz	$+20     	;abs 0x41be
    41ac:	1e 43       	mov	#1,	r14	;r3 As==01
    41ae:	0f 93       	tst	r15		
    41b0:	03 24       	jz	$+8      	;abs 0x41b8
    41b2:	0e 5e       	rla	r14		
    41b4:	1f 83       	dec	r15		
    41b6:	fd 23       	jnz	$-4      	;abs 0x41b2
    41b8:	c2 de 1d 00 	bis.b	r14,	&0x001d	
    41bc:	30 41       	ret			
  else    P4OUT &= ~(1 << index);
    41be:	1e 43       	mov	#1,	r14	;r3 As==01
    41c0:	0f 93       	tst	r15		
    41c2:	03 24       	jz	$+8      	;abs 0x41ca
    41c4:	0e 5e       	rla	r14		
    41c6:	1f 83       	dec	r15		
    41c8:	fd 23       	jnz	$-4      	;abs 0x41c4
    41ca:	c2 ce 1d 00 	bic.b	r14,	&0x001d	
    41ce:	30 41       	ret			

000041d0 <InitClock>:

#define ACLOCK    32768  /* rate of the Aclock                               */

void InitClock (void)
{
	TACTL  = TASSEL0 + TACLR + ID0 + ID1 + TAIE; /* ACLK, clear TAR, set clock divider at 8 */
    41d0:	b2 40 c6 01 	mov	#454,	&0x0160	;#0x01c6
    41d4:	60 01 
	TACCR0   = 0;  /* start first interrupt right away     */
    41d6:	82 43 72 01 	mov	#0,	&0x0172	;r3 As==00
	TACCTL0  = CCIE;            /* CCR0 interrupt enabled                        */
    41da:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    41de:	62 01 
	TACTL |= MC1;		    /* Start Timer_a in continious mode */  
    41e0:	b2 d0 20 00 	bis	#32,	&0x0160	;#0x0020
    41e4:	60 01 
}
    41e6:	30 41       	ret			

000041e8 <ContextSwitch>:
static uint8_t Contexts[NUMTASKS];
static uint8_t CurrentContext = 0;

void ContextSwitch()
{
	Contexts[CurrentContext] = LEDPIN; // store current context
    41e8:	5f 42 00 11 	mov.b	&0x1100,r15	
    41ec:	4e 4f       	mov.b	r15,	r14	
    41ee:	de 42 31 00 	mov.b	&0x0031,4354(r14);0x1102(r14)
    41f2:	02 11 
	CurrentContext++;
    41f4:	5f 53       	inc.b	r15		
    41f6:	c2 4f 00 11 	mov.b	r15,	&0x1100	
	// TODO set this to 0xFF for leds
	LEDPIN = 0; // disable all leds
    41fa:	c2 43 31 00 	mov.b	#0,	&0x0031	;r3 As==00
}
    41fe:	30 41       	ret			

00004200 <ResumeContext>:

void ResumeContext()
{
	CurrentContext--;
    4200:	5f 42 00 11 	mov.b	&0x1100,r15	
    4204:	7f 53       	add.b	#-1,	r15	;r3 As==11
    4206:	c2 4f 00 11 	mov.b	r15,	&0x1100	
	LEDPIN = Contexts[CurrentContext]; // resume context
    420a:	7f f3       	and.b	#-1,	r15	;r3 As==11
    420c:	3f 50 02 11 	add	#4354,	r15	;#0x1102
    4210:	e2 4f 31 00 	mov.b	@r15,	&0x0031	
}
    4214:	30 41       	ret			

00004216 <IntDisable>:

uint16_t IntDisable (void)
{
  uint16_t sw;
    // sw = r2
  asm volatile ("mov.w r2, %0\n\t" : "=r"(sw));
    4216:	0f 42       	mov	r2,	r15	
  _DINT();
    4218:	32 c2       	dint			
  return (sw);
}
    421a:	30 41       	ret			

0000421c <RestoreSW>:

void RestoreSW (uint16_t sw)
{
    // r2 = sw
  asm volatile ("mov.w %0, r2\n\t" :: "r"(sw));
    421c:	02 4f       	mov	r15,	r2	
}  
    421e:	30 41       	ret			

00004220 <InitTasks>:
void InitTasks (void)
{			
  uint8_t i=NUMTASKS-1; 
  do { 
    Taskp t = &Tasks[i];
    t->Flags = t->Activated = t->Invoked = 0;
    4220:	3f 40 39 11 	mov	#4409,	r15	;#0x1139
    4224:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    4228:	0e 4f       	mov	r15,	r14	
    422a:	3e 53       	add	#-1,	r14	;r3 As==11
    422c:	ce 43 00 00 	mov.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    4230:	6e 4e       	mov.b	@r14,	r14	
    4232:	7e f3       	and.b	#-1,	r14	;r3 As==11
    4234:	8f 4e 01 00 	mov	r14,	1(r15)	;0x0001(r15)
    4238:	cf 43 f0 ff 	mov.b	#0,	-16(r15);r3 As==00, 0xfff0(r15)
    423c:	0e 4f       	mov	r15,	r14	
    423e:	3e 50 ef ff 	add	#-17,	r14	;#0xffef
    4242:	ee 4f 00 00 	mov.b	@r15,	0(r14)	;0x0000(r14)
    4246:	6e 4e       	mov.b	@r14,	r14	
    4248:	7e f3       	and.b	#-1,	r14	;r3 As==11
    424a:	8f 4e f1 ff 	mov	r14,	-15(r15);0xfff1(r15)
    424e:	cf 43 e0 ff 	mov.b	#0,	-32(r15);r3 As==00, 0xffe0(r15)
    4252:	0e 4f       	mov	r15,	r14	
    4254:	3e 50 df ff 	add	#-33,	r14	;#0xffdf
    4258:	ee 4f 00 00 	mov.b	@r15,	0(r14)	;0x0000(r14)
    425c:	6e 4e       	mov.b	@r14,	r14	
    425e:	7e f3       	and.b	#-1,	r14	;r3 As==11
    4260:	8f 4e e1 ff 	mov	r14,	-31(r15);0xffe1(r15)
  } while (i--);
}
    4264:	30 41       	ret			

00004266 <RegisterTask>:
 * Each priority level has at most one task.
 */

uint8_t RegisterTask (uint16_t Phasing, uint16_t Period, uint16_t ExecutionTime,
                      void (*TaskFunc) (uint16_t), uint8_t Prio, uint8_t Flags)
{
    4266:	0b 12       	push	r11		
    4268:	0a 12       	push	r10		
    426a:	09 12       	push	r9		
    426c:	05 12       	push	r5		
    426e:	05 41       	mov	r1,	r5	
    4270:	35 50 0a 00 	add	#10,	r5	;#0x000a
    4274:	6b 45       	mov.b	@r5,	r11	
    4276:	59 45 02 00 	mov.b	2(r5),	r9	;0x0002(r5)
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
  Period *=4; // correct to get ms approximately

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
    427a:	7b 90 03 00 	cmp.b	#3,	r11	;#0x0003
    427e:	02 28       	jnc	$+6      	;abs 0x4284
    4280:	5f 43       	mov.b	#1,	r15	;r3 As==01
    4282:	2e 3c       	jmp	$+94     	;abs 0x42e0
{
  uint8_t  rtc = E_SUCCESS;
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
  Period *=4; // correct to get ms approximately
    4284:	0e 5e       	rla	r14		
    4286:	0e 5e       	rla	r14		

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
  if (Period == 0) return (E_WRONGPAR);
    4288:	0e 93       	tst	r14		
    428a:	03 20       	jnz	$+8      	;abs 0x4292
    428c:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    4290:	27 3c       	jmp	$+80     	;abs 0x42e0

uint16_t IntDisable (void)
{
  uint16_t sw;
    // sw = r2
  asm volatile ("mov.w r2, %0\n\t" : "=r"(sw));
    4292:	05 42       	mov	r2,	r5	
  _DINT();
    4294:	32 c2       	dint			
  Period *=4; // correct to get ms approximately

  if (Prio>=NUMTASKS) return (E_BOUNDS); // out of bounds
  if (Period == 0) return (E_WRONGPAR);
  sw = IntDisable (); 
  Taskp t = &Tasks[Prio]; 
    4296:	7b f3       	and.b	#-1,	r11	;r3 As==11
    4298:	0b 5b       	rla	r11		
    429a:	0b 5b       	rla	r11		
    429c:	0b 5b       	rla	r11		
    429e:	0b 5b       	rla	r11		
    42a0:	3b 50 12 11 	add	#4370,	r11	;#0x1112
  if (t->Flags) rtc = E_BUSY; 
    42a4:	1a 4b 08 00 	mov	8(r11),	r10	;0x0008(r11)
    42a8:	0a 93       	tst	r10		
    42aa:	02 24       	jz	$+6      	;abs 0x42b0
    42ac:	6f 43       	mov.b	#2,	r15	;r3 As==10
    42ae:	17 3c       	jmp	$+48     	;abs 0x42de
                      void (*TaskFunc) (uint16_t), uint8_t Prio, uint8_t Flags)
{
  uint8_t  rtc = E_SUCCESS;
  uint16_t sw;

  Phasing *= 4; // correct to get ms approximately
    42b0:	0f 5f       	rla	r15		
  if (Period == 0) return (E_WRONGPAR);
  sw = IntDisable (); 
  Taskp t = &Tasks[Prio]; 
  if (t->Flags) rtc = E_BUSY; 
  else {
    t->NextRelease = 0 + Phasing;
    42b2:	0f 5f       	rla	r15		
    42b4:	8b 4f 00 00 	mov	r15,	0(r11)	;0x0000(r11)
    t->Period    = Period; 
    42b8:	8b 4e 04 00 	mov	r14,	4(r11)	;0x0004(r11)
    t->NextPendingDeadline = t->NextRelease + Period;
    42bc:	2e 5b       	add	@r11,	r14	
    42be:	8b 4e 02 00 	mov	r14,	2(r11)	;0x0002(r11)
    t->Activated = t->Invoked = 0; 
    42c2:	cb 4a 07 00 	mov.b	r10,	7(r11)	;0x0007(r11)
    42c6:	cb 4a 06 00 	mov.b	r10,	6(r11)	;0x0006(r11)
    t->Taskf     = TaskFunc; 
    42ca:	8b 4c 0c 00 	mov	r12,	12(r11)	;0x000c(r11)
    t->ExecutionTime = ExecutionTime;
    42ce:	8b 4d 0a 00 	mov	r13,	10(r11)	;0x000a(r11)
    t->Flags     = Flags | TRIGGERED;
    42d2:	79 d0 40 00 	bis.b	#64,	r9	;#0x0040
    42d6:	79 f3       	and.b	#-1,	r9	;r3 As==11
    42d8:	8b 49 08 00 	mov	r9,	8(r11)	;0x0008(r11)
    42dc:	4f 4a       	mov.b	r10,	r15	
}

void RestoreSW (uint16_t sw)
{
    // r2 = sw
  asm volatile ("mov.w %0, r2\n\t" :: "r"(sw));
    42de:	02 45       	mov	r5,	r2	
    t->Flags     = Flags | TRIGGERED;

  }
  RestoreSW (sw);
  return (rtc);
}
    42e0:	35 41       	pop	r5		
    42e2:	39 41       	pop	r9		
    42e4:	3a 41       	pop	r10		
    42e6:	3b 41       	pop	r11		
    42e8:	30 41       	ret			

000042ea <UnRegisterTask>:

uint8_t UnRegisterTask (uint8_t t)
{
  Tasks[t].Flags = 0;
    42ea:	7f f3       	and.b	#-1,	r15	;r3 As==11
    42ec:	0f 5f       	rla	r15		
    42ee:	1f 53       	inc	r15		
    42f0:	0f 5f       	rla	r15		
    42f2:	0f 5f       	rla	r15		
    42f4:	0f 5f       	rla	r15		
    42f6:	8f 43 12 11 	mov	#0,	4370(r15);r3 As==00, 0x1112(r15)
  return (E_SUCCESS);
}  
    42fa:	4f 43       	clr.b	r15		
    42fc:	30 41       	ret			

000042fe <TimerIntrpt>:
  Use the Task data structure defined in 'Scheduler.h' to store information which can be used by the scheduler.

*/

interrupt (TIMERA0_VECTOR) TimerIntrpt (void)
{
    42fe:	0f 12       	push	r15		
    4300:	0e 12       	push	r14		
    4302:	0d 12       	push	r13		
    4304:	0c 12       	push	r12		
    4306:	0b 12       	push	r11		
    4308:	0a 12       	push	r10		
    430a:	09 12       	push	r9		
    430c:	08 12       	push	r8		
    430e:	07 12       	push	r7		
  ContextSwitch();
    4310:	b0 12 e8 41 	call	#0x41e8	
    4314:	3a 40 12 11 	mov	#4370,	r10	;#0x1112
    4318:	0b 4a       	mov	r10,	r11	
    431a:	77 40 03 00 	mov.b	#3,	r7	;#0x0003
    431e:	48 47       	mov.b	r7,	r8	
    4320:	49 43       	clr.b	r9		

  //when interrupt judge whether new request is coming
  for (i=0;i<NUMTASKS;i++)
  {
    Taskp t=&Tasks[i];
    if (t->Flags & TRIGGERED){
    4322:	bb b0 40 00 	bit	#64,	8(r11)	;#0x0040, 0x0008(r11)
    4326:	08 00 
    4328:	10 24       	jz	$+34     	;abs 0x434a
      if ((t->NextRelease==NextInterruptTime)){
    432a:	a2 9b 42 11 	cmp	@r11,	&0x1142	
    432e:	0d 20       	jnz	$+28     	;abs 0x434a
        SetDebug(0,1);
    4330:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4332:	4f 43       	clr.b	r15		
    4334:	b0 12 a6 41 	call	#0x41a6	
        t->Activated++; 
    4338:	db 53 06 00 	inc.b	6(r11)		;0x0006(r11)
        newly_activated=(newly_activated<i)?newly_activated:i;
    433c:	49 97       	cmp.b	r7,	r9	
    433e:	01 2c       	jc	$+4      	;abs 0x4342
    4340:	47 49       	mov.b	r9,	r7	
        // Pending |= i < BusyPrio;
        SetDebug(0,0);
    4342:	4e 43       	clr.b	r14		
    4344:	4f 4e       	mov.b	r14,	r15	
    4346:	b0 12 a6 41 	call	#0x41a6	
      }
    }
    if (t->Flags & ACTIVE)
    434a:	bb b2 08 00 	bit	#8,	8(r11)	;r2 As==11, 0x0008(r11)
    434e:	03 24       	jz	$+8      	;abs 0x4356
    {
      whether_active=(whether_active<i)?whether_active:i;
    4350:	49 98       	cmp.b	r8,	r9	
    4352:	01 2c       	jc	$+4      	;abs 0x4356
    4354:	48 49       	mov.b	r9,	r8	
  uint8_t i;
  uint8_t whether_active=NUMTASKS;
  uint8_t newly_activated=NUMTASKS;

  //when interrupt judge whether new request is coming
  for (i=0;i<NUMTASKS;i++)
    4356:	59 53       	inc.b	r9		
    4358:	3b 50 10 00 	add	#16,	r11	;#0x0010
    435c:	79 90 03 00 	cmp.b	#3,	r9	;#0x0003
    4360:	e0 23       	jnz	$-62     	;abs 0x4322
      whether_active=(whether_active<i)?whether_active:i;
    }
  }

  //if the most prior newly activated one is higher prior than the task executing, then interrupt
  if (newly_activated<whether_active)
    4362:	47 98       	cmp.b	r8,	r7	
    4364:	01 2c       	jc	$+4      	;abs 0x4368
    4366:	48 49       	mov.b	r9,	r8	

  Use the Task data structure defined in 'Scheduler.h' to store information which can be used by the scheduler.

*/

interrupt (TIMERA0_VECTOR) TimerIntrpt (void)
    4368:	3b 40 12 11 	mov	#4370,	r11	;#0x1112
    436c:	39 43       	mov	#-1,	r9	;r3 As==11
  uint16_t NextReleaseTime = 0xFFFF;

  for(i=0;i<NUMTASKS;i++)
  {
    Taskp t = &Tasks[i];
    if (t->Flags & TRIGGERED) { 
    436e:	bb b0 40 00 	bit	#64,	8(r11)	;#0x0040, 0x0008(r11)
    4372:	08 00 
    4374:	1a 24       	jz	$+54     	;abs 0x43aa

      SetDebug(2,1);
    4376:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4378:	6f 43       	mov.b	#2,	r15	;r3 As==10
    437a:	b0 12 a6 41 	call	#0x41a6	

      // always try to find the minimum one
      if (NextReleaseTime>t->NextRelease + t->Period)
    437e:	2f 4b       	mov	@r11,	r15	
    4380:	1f 5b 04 00 	add	4(r11),	r15	;0x0004(r11)
    4384:	0f 99       	cmp	r9,	r15	
    4386:	0d 2c       	jc	$+28     	;abs 0x43a2
      {
        SetDebug(3,1);
    4388:	5e 43       	mov.b	#1,	r14	;r3 As==01
    438a:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
    438e:	b0 12 a6 41 	call	#0x41a6	
        NextReleaseTime= t->NextRelease + t->Period;
    4392:	29 4b       	mov	@r11,	r9	
    4394:	19 5b 04 00 	add	4(r11),	r9	;0x0004(r11)
        SetDebug(3,0);
    4398:	4e 43       	clr.b	r14		
    439a:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
    439e:	b0 12 a6 41 	call	#0x41a6	
      }

      SetDebug(2,0);
    43a2:	4e 43       	clr.b	r14		
    43a4:	6f 43       	mov.b	#2,	r15	;r3 As==10
    43a6:	b0 12 a6 41 	call	#0x41a6	
    43aa:	3b 50 10 00 	add	#16,	r11	;#0x0010
  }

  //find next time interrupt
  uint16_t NextReleaseTime = 0xFFFF;

  for(i=0;i<NUMTASKS;i++)
    43ae:	3b 90 42 11 	cmp	#4418,	r11	;#0x1142
    43b2:	dd 23       	jnz	$-68     	;abs 0x436e
  }

  for (i=0;i<NUMTASKS;i++)
  {
    Taskp t = &Tasks[i];
    if (NextReleaseTime==0xFFFF)
    43b4:	39 93       	cmp	#-1,	r9	;r3 As==11
    43b6:	05 20       	jnz	$+12     	;abs 0x43c2
    {
      SetDebug(4,1);
    43b8:	5e 43       	mov.b	#1,	r14	;r3 As==01
    43ba:	6f 42       	mov.b	#4,	r15	;r2 As==10
    43bc:	b0 12 a6 41 	call	#0x41a6	
      break;
    43c0:	1a 3c       	jmp	$+54     	;abs 0x43f6
    }
    if ((t->Flags & TRIGGERED) && (NextReleaseTime == t->NextRelease + t->Period)) 
    43c2:	ba b0 40 00 	bit	#64,	8(r10)	;#0x0040, 0x0008(r10)
    43c6:	08 00 
    43c8:	0c 24       	jz	$+26     	;abs 0x43e2
    43ca:	2f 4a       	mov	@r10,	r15	
    43cc:	1f 5a 04 00 	add	4(r10),	r15	;0x0004(r10)
    43d0:	09 9f       	cmp	r15,	r9	
    43d2:	07 20       	jnz	$+16     	;abs 0x43e2
    {
      SetDebug(5,1);
    43d4:	5e 43       	mov.b	#1,	r14	;r3 As==01
    43d6:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    43da:	b0 12 a6 41 	call	#0x41a6	
      t->NextRelease = NextReleaseTime;
    43de:	8a 49 00 00 	mov	r9,	0(r10)	;0x0000(r10)
    }
    SetDebug(5,0);
    43e2:	4e 43       	clr.b	r14		
    43e4:	7f 40 05 00 	mov.b	#5,	r15	;#0x0005
    43e8:	b0 12 a6 41 	call	#0x41a6	
    43ec:	3a 50 10 00 	add	#16,	r10	;#0x0010
      SetDebug(2,0);

    }
  }

  for (i=0;i<NUMTASKS;i++)
    43f0:	3a 90 42 11 	cmp	#4418,	r10	;#0x1142
    43f4:	df 23       	jnz	$-64     	;abs 0x43b4
      t->NextRelease = NextReleaseTime;
    }
    SetDebug(5,0);
  }

  NextInterruptTime = NextReleaseTime;
    43f6:	82 49 42 11 	mov	r9,	&0x1142	

  TACCR0 = NextInterruptTime;
    43fa:	82 49 72 01 	mov	r9,	&0x0172	

  if (whether_active==NUMTASKS){
    43fe:	78 90 03 00 	cmp.b	#3,	r8	;#0x0003
    4402:	04 20       	jnz	$+10     	;abs 0x440c
    CALL_SCHEDULER;
    4404:	3f 40 12 11 	mov	#4370,	r15	;#0x1112
    4408:	b0 12 24 44 	call	#0x4424	

  // TACCR0 = NextInterruptTime;

  // CALL_SCHEDULER;

  ResumeContext();
    440c:	b0 12 00 42 	call	#0x4200	
}
    4410:	37 41       	pop	r7		
    4412:	38 41       	pop	r8		
    4414:	39 41       	pop	r9		
    4416:	3a 41       	pop	r10		
    4418:	3b 41       	pop	r11		
    441a:	3c 41       	pop	r12		
    441c:	3d 41       	pop	r13		
    441e:	3e 41       	pop	r14		
    4420:	3f 41       	pop	r15		
    4422:	00 13       	reti			

00004424 <Scheduler_P_FP>:
  /* ---------------------------------------------------------------- */

}

void Scheduler_P_FP (Task Tasks[])
{ 
    4424:	0b 12       	push	r11		
    4426:	0a 12       	push	r10		
    4428:	0b 4f       	mov	r15,	r11	
  // if (t->Activated != t->Invoked)
  // {
  //   ExecuteTask(t);
  // }

  SetLeds (BROWN, 0);
    442a:	4e 43       	clr.b	r14		
    442c:	6f 43       	mov.b	#2,	r15	;r3 As==10
    442e:	b0 12 90 41 	call	#0x4190	
    4432:	4a 43       	clr.b	r10		
    4434:	1b 3c       	jmp	$+56     	;abs 0x446c

  for(i=0;i<NUMTASKS;i++)
  {
    Taskp CurTask = &Tasks[i];
    while (CurTask->Activated != CurTask->Invoked) {
      if (CurTask->Flags & TRIGGERED) {
    4436:	bb b0 40 00 	bit	#64,	8(r11)	;#0x0040, 0x0008(r11)
    443a:	08 00 
    443c:	15 24       	jz	$+44     	;abs 0x4468
        SetLeds (BROWN, 1);
    443e:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4440:	6f 43       	mov.b	#2,	r15	;r3 As==10
    4442:	b0 12 90 41 	call	#0x4190	
        _EINT(); 
    4446:	32 d2       	eint			

static void ExecuteTask (Taskp t)
{
  /* ----------------------- INSERT CODE HERE ----------------------- */

  t->Flags =t->Flags | ACTIVE;
    4448:	bb d2 08 00 	bis	#8,	8(r11)	;r2 As==11, 0x0008(r11)
  t->Invoked++;
    444c:	db 53 07 00 	inc.b	7(r11)		;0x0007(r11)
  t->Taskf(t->ExecutionTime); // execute task
    4450:	1f 4b 0a 00 	mov	10(r11),r15	;0x000a(r11)
    4454:	9b 12 0c 00 	call	12(r11)	;0x000c(r11)
  t->Flags=t->Flags & (~ACTIVE);
    4458:	bb c2 08 00 	bic	#8,	8(r11)	;r2 As==11, 0x0008(r11)
    while (CurTask->Activated != CurTask->Invoked) {
      if (CurTask->Flags & TRIGGERED) {
        SetLeds (BROWN, 1);
        _EINT(); 
        ExecuteTask(CurTask);
        _DINT();
    445c:	32 c2       	dint			
        SetLeds (BROWN, 0);
    445e:	4e 43       	clr.b	r14		
    4460:	6f 43       	mov.b	#2,	r15	;r3 As==10
    4462:	b0 12 90 41 	call	#0x4190	
    4466:	02 3c       	jmp	$+6      	;abs 0x446c
        // CALL_SCHEDULER;
      } else {
        CurTask->Activated = CurTask->Invoked;
    4468:	cb 4f 06 00 	mov.b	r15,	6(r11)	;0x0006(r11)
  // uint8_t oldBP = BusyPrio; // Set BusyPrio as the priority of the currently running task (the one that was executing just before the scheduler is called)

  for(i=0;i<NUMTASKS;i++)
  {
    Taskp CurTask = &Tasks[i];
    while (CurTask->Activated != CurTask->Invoked) {
    446c:	5f 4b 07 00 	mov.b	7(r11),	r15	;0x0007(r11)
    4470:	cb 9f 06 00 	cmp.b	r15,	6(r11)	;0x0006(r11)
    4474:	e0 23       	jnz	$-62     	;abs 0x4436

  uint8_t i;

  // uint8_t oldBP = BusyPrio; // Set BusyPrio as the priority of the currently running task (the one that was executing just before the scheduler is called)

  for(i=0;i<NUMTASKS;i++)
    4476:	5a 53       	inc.b	r10		
    4478:	3b 50 10 00 	add	#16,	r11	;#0x0010
    447c:	7a 90 03 00 	cmp.b	#3,	r10	;#0x0003
    4480:	f5 23       	jnz	$-20     	;abs 0x446c
        CurTask->Activated = CurTask->Invoked;
      }
    }
  }

  SetLeds (BROWN, 1);
    4482:	5e 43       	mov.b	#1,	r14	;r3 As==01
    4484:	6f 43       	mov.b	#2,	r15	;r3 As==10
    4486:	b0 12 90 41 	call	#0x4190	
  /* End of example*/

  /* ---------------------------------------------------------------- */
}
    448a:	3a 41       	pop	r10		
    448c:	3b 41       	pop	r11		
    448e:	30 41       	ret			

00004490 <Scheduler_P_EDF>:
void Scheduler_P_EDF (Task Tasks[])
{ 
  /* insert code */
  /* Use ExecuteTask function to execute a task */
  /* insert code */
}
    4490:	30 41       	ret			

00004492 <StartTracking>:
static uint16_t Totals[TT_MAX];
static uint8_t JobsExecuted;

void StartTracking(uint8_t index)
{
    StartTimes[index] = TAR;
    4492:	7f f3       	and.b	#-1,	r15	;r3 As==11
    4494:	0f 5f       	rla	r15		
    4496:	9f 42 70 01 	mov	&0x0170,4358(r15);0x1106(r15)
    449a:	06 11 
}
    449c:	30 41       	ret			

0000449e <StopTracking>:

void StopTracking(uint8_t index)
{
    Totals[index] += TAR - StartTimes[index];
    449e:	7f f3       	and.b	#-1,	r15	;r3 As==11
    44a0:	0f 5f       	rla	r15		
    44a2:	1e 42 70 01 	mov	&0x0170,r14	
    44a6:	1e 5f 0a 11 	add	4362(r15),r14	;0x110a(r15)
    44aa:	1e 8f 06 11 	sub	4358(r15),r14	;0x1106(r15)
    44ae:	8f 4e 0a 11 	mov	r14,	4362(r15);0x110a(r15)
}
    44b2:	30 41       	ret			

000044b4 <AddJobExecution>:

void AddJobExecution()
{
    JobsExecuted++;
    44b4:	d2 53 0e 11 	inc.b	&0x110e	
}
    44b8:	30 41       	ret			

000044ba <PrintResults>:

void PrintResults()
{
    P1OUT = Totals[TT_TIMER_INTERRUPT] & 0xFF;
    44ba:	3e 40 0a 11 	mov	#4362,	r14	;#0x110a
    44be:	2d 4e       	mov	@r14,	r13	
    44c0:	c2 4d 21 00 	mov.b	r13,	&0x0021	
    P2OUT = Totals[TT_TIMER_INTERRUPT] >> 8;
    44c4:	3f 4e       	mov	@r14+,	r15	
    44c6:	0f 4d       	mov	r13,	r15	
    44c8:	8f 10       	swpb	r15		
    44ca:	7f f3       	and.b	#-1,	r15	;r3 As==11
    44cc:	c2 4f 29 00 	mov.b	r15,	&0x0029	

    P3OUT = Totals[TT_SCHEDULER] & 0xFF;
    44d0:	2f 4e       	mov	@r14,	r15	
    44d2:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    P4OUT = Totals[TT_SCHEDULER] >> 8;
    44d6:	8f 10       	swpb	r15		
    44d8:	7f f3       	and.b	#-1,	r15	;r3 As==11
    44da:	c2 4f 1d 00 	mov.b	r15,	&0x001d	

    P6OUT = JobsExecuted;
    44de:	d2 42 0e 11 	mov.b	&0x110e,&0x0035	
    44e2:	35 00 
    44e4:	30 41       	ret			

Disassembly of section .vectors:

0000ffe0 <InterruptVectors>:
    ffe0:	30 40 30 40 30 40 30 40 30 40 30 40 fe 42 30 40     0@0@0@0@0@0@.B0@
    fff0:	30 40 30 40 30 40 30 40 30 40 30 40 30 40 00 40     0@0@0@0@0@0@0@.@
